def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def dartEnvironmentVariables = [
        APP_NAME: 'Global Trace',
        APP_SUFFIX: null,
        APP_VERSION: '1.0.0',
        APP_VERSION_CODE: '1',
        APP_AOS_GOOGLE_SERVICE_KEY: '',
        APP_DEEP_LINK_KEY_LIVE: '',
        APP_DEEP_LINK_KEY_TEST: '',
        APP_DEEP_LINK_DOMAIN: '',
        APP_DEEP_LINK_ALTERNATIVE_DOMAIN: '',
]
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}




apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.dgnx.usdol"
    ndkVersion flutter.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.dgnx.usdol"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode dartEnvironmentVariables.APP_VERSION_CODE.toInteger()
        versionName dartEnvironmentVariables.APP_VERSION
        applicationIdSuffix dartEnvironmentVariables.APP_SUFFIX
        resValue "string", "app_name", dartEnvironmentVariables.APP_NAME
        resValue "string", "app_google_sercice_key", dartEnvironmentVariables.APP_AOS_GOOGLE_SERVICE_KEY
        resValue "string", "app_deep_link_key_live", dartEnvironmentVariables.APP_DEEP_LINK_KEY_LIVE
        resValue "string", "app_deep_link_key_test", dartEnvironmentVariables.APP_DEEP_LINK_KEY_TEST
        resValue "string", "app_deep_link_domain", dartEnvironmentVariables.APP_DEEP_LINK_DOMAIN
        resValue "string", "app_deep_link_alternative_domain", dartEnvironmentVariables.APP_DEEP_LINK_ALTERNATIVE_DOMAIN
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
